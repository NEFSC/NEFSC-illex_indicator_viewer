; $ID:	ILLEX_VIEWER_COMPOSITE.PRO,	2022-08-08-09,	USER-KJWH	$
PRO ILLEX_VIEWER_COMPOSITE, VERSTR, PRODS=PRODS, TYPES=TYPES, MAPP=MAPP, WEEKS=WEEKS, DAYS=DAYS, DATERANGE=DATERANGE, BUFFER=BUFFER, CURRENT=CURRENT, DIR_OUT=DIR_OUT, $
                            SPACE=SPACE, LEFT=LEFT, RIGHT=RIGHT, TOP=TOP, BOTTOM=BOTTOM, NCOLS=NCOLS, NROWS=NROWS, XDIM=XDIM, YDIM=YDIM, $
                            RESIZE=RESIZE, OUTLINES=OUTINES, _REF_EXTRA=EXTRA 
;+
; NAME:
;   ILLEX_VIEWER_COMPOSITE
;
; PURPOSE:
;   This function will return an image to be used in the composites and annimations for the Weekly Illex website
;
; PROJECT:
;   illex_indicator_viewer
;
; CALLING SEQUENCE:
;   ILLEX_VIEWER_COMPOSITE($Parameter1$, $Parameter2$, $Keyword=Keyword$, ...)
;
; REQUIRED INPUTS:
;   Parm1.......... Describe the positional input parameters here. 
;
; OPTIONAL INPUTS:
;   Parm2.......... Describe optional inputs here. If none, delete this section.
;
; KEYWORD PARAMETERS:
;   KEY1........... Document keyword parameters like this. Note that the keyword is shown in ALL CAPS!
;
; OUTPUTS:
;   OUTPUT.......... Decribe the output of this program or function
;
; OPTIONAL OUTPUTS:
;   None
;
; COMMON BLOCKS: 
;   None
;
; SIDE EFFECTS:  
;   None
;
; RESTRICTIONS:  
;   None
;
; EXAMPLE:
; 
;
; NOTES:
;   $Citations or any other useful notes$
;   
; COPYRIGHT: 
; Copyright (C) 2022, Department of Commerce, National Oceanic and Atmospheric Administration, National Marine Fisheries Service,
;   Northeast Fisheries Science Center, Narragansett Laboratory.
;   This software may be used, copied, or redistributed as long as it is not sold and this copyright notice is reproduced on each copy made.
;   This routine is provided AS IS without any express or implied warranties whatsoever.
;
; AUTHOR:
;   This program was written on June 02, 2022 by Kimberly J. W. Hyde, Northeast Fisheries Science Center | NOAA Fisheries | U.S. Department of Commerce, 28 Tarzwell Dr, Narragansett, RI 02882
;    
; MODIFICATION HISTORY:
;   Jun 02, 2022 - KJWH: Initial code written
;-
; ****************************************************************************************************
  ROUTINE_NAME = 'ILLEX_VIEWER_COMPOSITE'
  COMPILE_OPT IDL2
  SL = PATH_SEP()

  IF ~N_ELEMENTS(DIR_OUT) THEN ODIR=VERSTR.DIRS.DIR_COMPOSITES ELSE ODIR = DIR_OUT & DIR_TEST, ODIR

  IF ~N_ELEMENTS(MAPP) THEN MP = VERSTR.INFO.MAP_OUT ELSE MP = MAPP
  MR = MAPS_READ(MP)
  MR_DIMS  = FLOAT(STRSPLIT(MR.IMG_DIMS,';',/EXTRACT))
  XX = MR_DIMS[0]/MR.PX & YY = MR_DIMS[1]/MR.PY
  IF ~N_ELEMENTS(RESIZE) THEN RESZ = 0.85 ELSE RESZ = RESIZE
  
  
;  PER = PERIOD_2STRUCT(FP.PERIOD)
  
  YR = VERSTR.INFO.ILLEX_YEAR
  IF ~N_ELEMENTS(DATERANGE) THEN DTR = GET_DATERANGE(YR) ELSE DTR = GET_DATERANGE(DATERANGE)
  
  PERS = []
  IF KEYWORD_SET(WEEKS) THEN BEGIN
    IF N_ELEMENTS(WEEKS) EQ 1 AND WEEKS[0] EQ 1 THEN WKS = ADD_STR_ZERO(INDGEN(51)+2) ELSE WKS = WEEKS
    PERS = [PERS,'W_' + VERSTR.INFO.ILLEX_YEAR + WKS]
  ENDIF
  IF KEYWORD_SET(DAYS) THEN BEGIN
    IF N_ELEMENTS(DAYS) EQ 1 AND DAYS[0] EQ 1 THEN DYS = CREATE_DATE(DTR[0],DTR[1]) ELSE DYS = DAYS
    PERS = [PERS,'D_' + STRMID(DYS,0,8)]
  ENDIF
  PERS = DATE_SELECT(PERS,DTR)
  
  IF ~N_ELEMENTS(PRODS) THEN PRDS = VERSTR.INFO.PNG_PRODS ELSE PRDS = PRODS
  IF ~N_ELEMENTS(TYPES) THEN TYPS = ['STACKED_STATS','STACKED_ANOMS']     ELSE TYPS = TYPES
  NFILES = N_ELEMENTS(PRDS)*N_ELEMENTS(TYPS)

  
  FOR K=0, N_ELEMENTS(PERS)-1 DO BEGIN
    PER = PERIOD_2STRUCT(PERS[K])
    IF DATE_2JD(PER.DATE_START) GT DATE_NOW(/JD) THEN CONTINUE

    DR = [PER.DATE_START,PER.DATE_END]
    TPS = TYPS
    CASE PER.PERIOD_CODE OF
      'W': TXT = 'Week ' + STRMID(PER.PERIOD,6,2) + ': ' + STRMID(PER.DATE_START,0,8) + ' - ' + STRMID(PER.DATE_END,0,8)
      'D': BEGIN & TXT = (DATE_PARSE(PER.DATE_START)).DASH_DATE & TPS = 'STACKED_SAVE' & END
    ENDCASE  
    
    ; ===> SET UP PLOT SPACING
    IF ~N_ELEMENTS(BUFFER) THEN BUFFER = 1 ; Do plotting in background
    IF ~N_ELEMENTS(SPACE)  THEN SPACE  = 1
    IF ~N_ELEMENTS(LEFT)   THEN LEFT   = 1
    IF ~N_ELEMENTS(RIGHT)  THEN RIGHT  = 1
    IF ~N_ELEMENTS(TOP)    THEN TOP    = 10
    IF ~N_ELEMENTS(BOTTOM) THEN IF ~KEYWORD_SET(NO_COLORBAR) THEN BOTTOM = 8 ELSE BOTTOM = SPACE * 3
    IF ~N_ELEMENTS(NCOLS)  THEN NCOL  = N_ELEMENTS(PRDS) ELSE NCOL = NCOLS
    IF ~N_ELEMENTS(NROWS)  THEN NROW  = N_ELEMENTS(TPS)  ELSE NROW = NROWS
    IF ~N_ELEMENTS(XDIM)   THEN XDIM   = MR.PX/NFILES
    IF ~N_ELEMENTS(YDIM)   THEN YDIM   = MR.PY/NFILES

    XNSPACE = NCOL-1 & YNSPACE = NROW-1
    WIDTH   = LEFT   + NCOL*XDIM + XNSPACE*SPACE + RIGHT
    HEIGHT  = BOTTOM + NROW*YDIM + YNSPACE*SPACE + TOP

    FILES = []
    FOR N=0, N_ELEMENTS(PRDS)-1 DO BEGIN
      PR = PRODS_READ(PRDS[N])
      PSTR = VERSTR.PROD_INFO.(WHERE(TAG_NAMES(VERSTR.PROD_INFO) EQ PR.PROD))      
      DSET = PSTR.DATASET
      FOR T=0, N_ELEMENTS(TPS)-1 DO BEGIN
        ATYPE = TPS[T] 
        FILE = GET_FILES(DSET,PRODS=PSTR.PROD,PERIOD=PER.PERIOD_CODE,FILE_TYPE=ATYPE, DATERANGE=VERSTR.INFO.ILLEX_YEAR)
        IF FILE EQ [] THEN FILE = ''
        FILES = [FILES,FILE]
      ENDFOR ; PRODS
    ENDFOR ; TYPES

    PNGFILE = ODIR + PER.PERIOD + '-' + MP + '-' + STRJOIN(PRDS,'_') + '-' + STRJOIN(TPS,'_') + '-COMPOSITE' +'.PNG'
    PNGFILE = REPLACE(PNGFILE,'STACKED_','')
    IF ~FILE_MAKE(FILES,PNGFILE,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE) THEN CONTINUE
    OK = WHERE(FILES NE '', COUNT_FILES)
    IF COUNT_FILES EQ 0 THEN CONTINUE
    
    COUNTER = 0
    FOR N=0, N_ELEMENTS(TPS)-1 DO BEGIN
      ATYPE = TPS[N]
      FOR T=0, N_ELEMENTS(PRDS)-1 DO BEGIN
        PR = PRODS_READ(PRDS[T])
        PSTR = VERSTR.PROD_INFO.(WHERE(TAG_NAMES(VERSTR.PROD_INFO) EQ PR.PROD))
        DSET = PSTR.DATASET
        IF PR.IN_PROD NE PR.PROD THEN PROD_SCALE = PR.IN_PROD ELSE PROD_SCALE = [];PSTR.PROD_SCALE
   ;     IF ATYPE EQ 'ANOMS' THEN PROD_SCALE = PSTR.ANOM_SCALE
        
        C = COUNTER MOD NCOL           ; Number of columns is associated with the number of months so C represents the column number
        XPOS = LEFT + C*XDIM + C*SPACE  ; Determine the left side of the image
        IF C EQ 0 THEN R = COUNTER/NCOL ELSE R = N ; When C = 0, start a new row
        IF T EQ 0 THEN YPOS = HEIGHT - TOP - R*YDIM - R*SPACE ELSE YPOS = YPOS ; Determine the top position of the image
        IPOS = [XPOS,YPOS-YDIM,XPOS+XDIM,YPOS]
        COUNTER = COUNTER + 1

         
        FILE = GET_FILES(DSET,PRODS=PSTR.PROD,PERIOD=PER.PERIOD_CODE,FILE_TYPE=ATYPE, DATERANGE=VERSTR.INFO.ILLEX_YEAR)
        IF FILE EQ [] THEN CONTINUE
        IF N_ELEMENTS(FILE) GT 1 THEN MESSAGE,'ERROR: More that one file found for ' + PSTR.PROD + ' - ' + ATYPE
        FP = PARSE_IT(FILE,/ALL)
        DIR_PNG = VERSTR.DIRS.DIR_PNGS + PR.PROD + SL + ATYPE + SL & DIR_TEST, DIR_PNG
        IPNG = DIR_PNG + REPLACE(FP.NAME +'.PNG',FP.MAP,MP)

        IMG = ILLEX_VIEWER_IMAGE(VERSTR, FILE=FILE, DATERANGE=DR,BUFFER=BUFFER, RESIZE=RESZ, MAPP=MP, PROD_SCALE=PROD_SCALE, _EXTRA=EXTRA)

        CPIM = IMG.COPYWINDOW()
        TX = TEXT(0.5,0.94,TXT,ALIGNMENT=0.50,FONT_SIZE=14)
        IF FILE_MAKE(FILE,IPNG,OVERWRITE=OVERWRITE) THEN IMG.SAVE, IPNG, RESOLUTION=RESOLUTION
        IMG.CLOSE

        IF W EQ [] THEN W = WINDOW(DIMENSIONS=[WIDTH,HEIGHT],BUFFER=BUFFER,TITLE=TXT)
        W.WINDOW.SETCURRENT
        IMG = IMAGE(CPIM, /CURRENT, POSITION=IPOS, /DEVICE)
      ENDFOR ; PRODS
    ENDFOR ; TYPES

  ;  TX = TEXT(WIDTH/2, HEIGHT-TOP, TXT, /DEVICE, FONT_STYLE='BOLD', FONT_SIZE=10, ALIGNMENT=0.5, VERTICAL_ALIGNMENT=1.0)
    W.SAVE, PNGFILE, RESOLUTION=RESOLUTION
    W.CLOSE
  ENDFOR ; PERIODS
  
END ; ***************** End of ILLEX_VIEWER_IMAGE *****************
